type KeysWithFunctions<T> = {
    [K in keyof T]:
        T[K] extends (...args: unknown[]) => unknown
            ? K
            : never
}[keyof T]

type OnlyFunctions<S> = {
  [Key in keyof S]: S[Key] extends Function ? Key : never;
}[keyof S];

type GetTypes<S, K = keyof S> = K extends OnlyFunctions<S> ? "slice" : K & "group";

type checkNever<S> = GetTypes<S> extends never ? "group" : "slice"

type GetType<T> =
    KeysWithFunctions<T> extends never
        ? 'group'
        : 'slice'

type A = GetType<{ data: 10, upload(): void }>
//   ^?

type B = GetType<{ data: 10 }>
//   ^?

type C = GetType<{ data: 10, nested: { data2: 20, fn: () => void } }>
//   ^?


const firstSlice = {
    data: {},
    up: ()=> {}
}

const secondSlice = {
    data: 10,
    other: {
        up: ()=> {}
    },
    up: ()=> {}

}

const thirdSlice = {
    ggg: {
        fd: 12, g: ()=> {}
    },
    data: {
        func: () => {

        }
    },
    up: ()=> {}
}

const fourthSlice = {
    ggg: {},
    data: {
        func: () => {

        }
    },
    up: ()=> {}
}

const firstGroup = {
    ggg: 12,
    data: {
        func: () => {

        }
    },
    data2: {
        func: () => {

        }
    },
}

const secondGroup = {
    ggg: {},
    data: {
        func: () => {

        }
    },
    data2: {
        func: () => {

        }
    },
}

type Callable = (...args: any[]) => any
type CheckExtends<T, U> = T extends U ? T : never
type GetType<S> = CheckExtends<S[keyof S], Callable> extends never ? "group" : "slice"



declare const firstSliceResult: checkNever<typeof firstSlice>; // ✅ type is slice. It is correct

declare const secondSliceResult: checkNever<typeof secondSlice>; // ✅ type is slice. It is correct

declare const thirdSliceResult: checkNever<typeof thirdSlice>; // ✅ type is slice. It is correct

declare const fourthSliceResult: checkNever<typeof fourthSlice>; // ✅ type is slice. It is correct

declare const firstGroupResult: checkNever<typeof firstGroup>; // ✅ type is group. It is correct

declare const secondGroupResult: checkNever<typeof secondGroup>;  // ✅ type is group. It is correct

